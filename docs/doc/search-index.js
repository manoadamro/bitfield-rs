var searchIndex = JSON.parse('{\
"ubits":{"doc":"crates.io Downloads Build Docs Licence","t":[14,0,0,0,18,18,3,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,18,18,3,4,13,13,13,13,13,13,13,13,18,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11,11],"n":["bitfield","examples","flagless_example","full_example","BITS","BYTES","ExampleField","MAX","as_binary","as_integer","bitand","bitand_assign","bitor","bitor_assign","bitxor","bitxor_assign","borrow","borrow_mut","clear_index","clone","clone_into","combine","default","diff","eq","fmt","fmt","from","from","from_binary_str","from_binary_string","get_index","intersect","into","into_combined","into_diff","into_intersection","ne","new","ones","partial_cmp","set_index","to_owned","toggle_index","try_from","try_into","type_id","zeros","BITS","BYTES","ExampleField","ExampleFlags","Flag0","Flag1","Flag2","Flag3","Flag4","Flag5","Flag6","Flag7","MAX","as_binary","as_integer","bitand","bitand","bitand","bitand","bitand","bitand_assign","bitand_assign","bitor","bitor","bitor","bitor","bitor","bitor_assign","bitor_assign","bitxor","bitxor","bitxor","bitxor","bitxor","bitxor_assign","bitxor_assign","borrow","borrow","borrow_mut","borrow_mut","clear","clear_index","clone","clone","clone_into","clone_into","combine","default","diff","eq","eq","fmt","fmt","fmt","from","from","from","from","from","from_binary_str","from_binary_string","get","get_index","intersect","into","into","into_combined","into_diff","into_intersection","ne","new","ones","partial_cmp","partial_cmp","set","set_index","to_owned","to_owned","toggle","toggle_index","try_from","try_from","try_into","try_into","type_id","type_id","zeros"],"q":["ubits","","ubits::examples","","ubits::examples::flagless_example","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","ubits::examples::full_example","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","","",""],"d":["Generates a bitfield struct and a corresponding flag enum.","Examples of generated output using different …","Example of generated output, using only a bit field …","Example of generated output, using both a bit field and a …","Number of bits in an instance of <code>ExampleField</code>.","Number of bytes used by an instance of <code>ExampleField</code>.","Optional docstring for my example bit field.","Maximum valid integer for <code>ExampleField</code>.","Returns the current field value as a binary formatted …","Returns the current field value as a <code>u8</code>","","","","","","","","","Sets the value of the bit at the supplied index to <code>0</code>.","","","Returns a new <code>ExampleField</code>with ones for flags that were …","","Returns a new <code>ExampleField</code>with ones for flags that do not …","","","","Returns the argument unchanged.","","Create a new instance of <code>ExampleField</code> from a binary string.","Create a new instance of <code>ExampleField</code> from a binary string.","Returns the value of the bit at the supplied index as a …","Returns a new <code>ExampleField</code>with ones for flags that were …","Calls <code>U::from(self)</code>.","Returns a new <code>ExampleField</code>with ones for flags that were …","Returns a new <code>ExampleField</code>with ones for flags that do not …","Returns a new <code>ExampleField</code>with ones for flags that were …","","Create a new instance of <code>ExampleField</code> from a <code>u8</code> value.","Create a new instance of <code>ExampleField</code> from the maximum …","","Sets the value of the bit at the supplied index to <code>1</code>.","","Flips the value of the bit at the supplied index.","","","","Create a new instance of <code>ExampleField</code> from <code>0</code>.","Number of bits in an instance of <code>ExampleField</code>.","Number of bytes used by an instance of <code>ExampleField</code>.","Optional docstring for my example bit field.","Optional docstring for my flag enum.","Optional docstring for Flag0","Optional docstring for Flag1","Optional docstring for Flag2","Optional docstring for Flag3","Optional docstring for Flag4","Optional docstring for Flag5","Optional docstring for Flag6","Optional docstring for Flag7","Maximum valid integer for <code>ExampleField</code>.","Returns the current field value as a binary formatted …","Returns the current field value as a <code>u8</code>","","","","","","","","","","","","","","","","","","","","","","","","","","Sets the value of the bit at the supplied flag to <code>0</code>.","Sets the value of the bit at the supplied index to <code>0</code>.","","","","","Returns a new <code>ExampleField</code>with ones for flags that were …","","Returns a new <code>ExampleField</code>with ones for flags that do not …","","","","","","","Returns the argument unchanged.","","","Returns the argument unchanged.","Create a new instance of <code>ExampleField</code> from a binary string.","Create a new instance of <code>ExampleField</code> from a binary string.","Returns the value of the bit at the supplied flag as a …","Returns the value of the bit at the supplied index as a …","Returns a new <code>ExampleField</code>with ones for flags that were …","Calls <code>U::from(self)</code>.","Calls <code>U::from(self)</code>.","Returns a new <code>ExampleField</code>with ones for flags that were …","Returns a new <code>ExampleField</code>with ones for flags that do not …","Returns a new <code>ExampleField</code>with ones for flags that were …","","Create a new instance of <code>ExampleField</code> from a <code>u8</code> value.","Create a new instance of <code>ExampleField</code> from the maximum …","","","Sets the value of the bit at the supplied flag to <code>1</code>.","Sets the value of the bit at the supplied index to <code>1</code>.","","","Flips the value of the bit at the supplied flag.","Flips the value of the bit at the supplied index.","","","","","","","Create a new instance of <code>ExampleField</code> from <code>0</code>."],"i":[0,0,0,0,1,1,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,12,12,0,0,13,13,13,13,13,13,13,13,12,12,12,13,12,12,12,12,12,12,13,12,12,12,12,12,12,13,12,12,12,12,12,12,13,12,13,12,12,12,13,12,13,12,12,12,12,13,12,13,12,12,13,13,12,12,12,12,12,12,12,12,13,12,12,12,12,12,12,12,13,12,12,12,13,12,12,12,13,12,13,12,13,12,12],"f":[0,0,0,0,0,0,0,0,[1,2],[1,3],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[1,1]],[[]],[[]],[[1,3]],[1,1],[[]],[[1,1],1],[[],1],[[1,1],1],[[1,1],4],[[1,5],6],[[1,5],6],[[]],[3,1],[7,1],[2,1],[[1,3],4],[[1,1],1],[[]],[[1,1],1],[[1,1],1],[[1,1],1],[[1,1],4],[3,1],[[],1],[[1,1],[[9,[8]]]],[[1,3]],[[]],[[1,3]],[[],10],[[],10],[[],11],[[],1],0,0,0,0,0,0,0,0,0,0,0,0,0,[12,2],[12,3],[[13,13]],[[12,13]],[[12,13]],[[12,12]],[[12,13]],[[12,12]],[[12,13]],[[13,13]],[[12,12]],[[12,13]],[[12,13]],[[12,13]],[[12,12]],[[12,13]],[[13,13]],[[12,13]],[[12,13]],[[12,13]],[[12,12]],[[12,12]],[[12,13]],[[]],[[]],[[]],[[]],[[12,13],12],[[12,3]],[13,13],[12,12],[[]],[[]],[[12,12],12],[[],12],[[12,12],12],[[13,13],4],[[12,12],4],[[13,5],6],[[12,5],6],[[12,5],6],[3,13],[[]],[3,12],[13,12],[[]],[7,12],[2,12],[[12,13],4],[[12,3],4],[[12,12],12],[[]],[[]],[[12,12],12],[[12,12],12],[[12,12],12],[[12,12],4],[3,12],[[],12],[[13,13],[[9,[8]]]],[[12,12],[[9,[8]]]],[[12,13],12],[[12,3]],[[]],[[]],[[12,13],12],[[12,3]],[[],10],[[],10],[[],10],[[],10],[[],11],[[],11],[[],12]],"p":[[3,"ExampleField"],[3,"String"],[15,"u8"],[15,"bool"],[3,"Formatter"],[6,"Result"],[15,"str"],[4,"Ordering"],[4,"Option"],[4,"Result"],[3,"TypeId"],[3,"ExampleField"],[4,"ExampleFlags"]]}\
}');
if (typeof window !== 'undefined' && window.initSearch) {window.initSearch(searchIndex)};
if (typeof exports !== 'undefined') {exports.searchIndex = searchIndex};
